#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
 Author:      fyso@163.com fengyangsgs@js.chinamobile.com
 DateTime:    Thu Sep 21 21:12:02 2017
 Description: 正则表达式 regular！  每一个学过的东西都是有用的！
"""
__author__ = 'FengYang'


# 字符串是编程时涉及到的最多的一种数据结构，对字符串进行操作的需求几乎无处不在。
#比如判断一个字符串是否是合法的Email地址，虽然可以编程提取@前后的子串，再分别判断是否是单词和域名，
#但这样做不但麻烦，而且代码难以复用。

print '------------------11.1---------------------'
'''
在正则表达式中，如果直接给出字符，就是精确匹配。用\d可以匹配一个数字，\w可以匹配一个字母或数字，所以：
'00\d'可以匹配'007'，但无法匹配'00A'；
'\d\d\d'可以匹配'010'；
'\w\w\d'可以匹配'py3'；
.可以匹配任意字符，所以：
'py.'可以匹配'pyc'、'pyo'、'py!'等等。
要匹配变长的字符，在正则表达式中，用*表示任意个字符（包括0个），用+表示至少一个字符，用?表示0个或1个字符，用{n}表示n个字符，用{n,m}表示n-m个字符：

来看一个复杂的例子：\d{3}\s+\d{3,8}。
我们来从左到右解读一下：
\d{3}表示匹配3个数字，例如'010'；
\s可以匹配一个空格（也包括Tab等空白符），所以\s+表示至少有一个空格，例如匹配' '，' '等；
\d{3,8}表示3-8个数字，例如'1234567'。
综合起来，上面的正则表达式可以匹配以任意个空格隔开的带区号的电话号码。
如果要匹配'010-12345'这样的号码呢？由于'-'是特殊字符，在正则表达式中，要用'\'转义，所以，上面的正则是\d{3}\-\d{3,8}。
但是，仍然无法匹配'010 - 12345'，因为带有空格。所以我们需要更复杂的匹配方式。
'''

'''
进阶
要做更精确地匹配，可以用[]表示范围，比如：
[0-9a-zA-Z\_]可以匹配一个数字、字母或者下划线；
[0-9a-zA-Z\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串，比如'a100'，'0_Z'，'Py3000'等等；
[a-zA-Z\_][0-9a-zA-Z\_]*可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；
[a-zA-Z\_][0-9a-zA-Z\_]{0, 19}更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。
A|B可以匹配A或B，所以(P|p)ython可以匹配'Python'或者'python'。
^表示行的开头，^\d表示必须以数字开头。
$表示行的结束，\d$表示必须以数字结束。
你可能注意到了，py也可以匹配'python'，但是加上^py$就变成了整行匹配，就只能匹配'py'了。
'''

print '\n------------ re模块 -------------'
import re
s = r'^\d{3}\-\d{3,8}$'
print s
print re.match(s, '010-12345678')
print re.match(s, '010 12345')
print re.match(s, '010-123')
print re.match(s, '010-123456789')

print '\n------------ 切分字符串 -------------'
#无法识别连续的空格
print 'a b   c'.split(' ')
print re.split(r'\s+', 'a b   c')

#无论多少个空格都可以正常分割。加入, ; 试试：
print  re.split(r'[\s\,]+', 'a,b, c        d')
print  re.split(r'[\s\,\;]+', 'a,    b;;    c ,,,,, d')
#如果用户输入了一组标签，下次记得用正则表达式来把不规范的输入转化成正确的数组。

print '\n------------ 分组 -------------'
#除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。
#用()表示的就是要提取的分组（Group）。比如：
#^(\d{3})-(\d{3,8})$分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码：
m = re.match(r'^(\d{3})-(\d{3,8})$', '010-12345')
print m
print m.group(0)
print m.group(1)
print m.group(2)
print m.groups()
#注意到group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串

print '\n------- ------'
#提取子串非常有用。来看一个更凶残的例子：
r = r'^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$'
t = '19:05:30'
m = re.match(r, t)
print m.groups()

t = '1:5:0'
m = re.match(r, t)
print m.groups()

t = '2:5:0'
m = re.match(r, t)
print m.groups()

print '\n------- ------'
#比如识别日期：
r = '^(0[1-9]|1[0-2]|[0-9])-(0[1-9]|1[0-9]|2[0-9]|3[0-1]|[0-9])$'
#对于'2-30'，'4-31'这样的非法日期，用正则还是识别不了 ，或者说写出来非常困难，这时就需要程序配合识别了。
t = '2-28'
m = re.match(r, t)
print m.groups()

t = '4-31'
m = re.match(r, t)
print m.groups()

print '\n------------ 贪婪匹配 -------------'
#最后需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。
#举例如下，匹配出数字后面的0：
print (re.match(r'^(\d+)(0*)$', '102300000000000000000').groups())
#由于\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了。
#必须让\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，
#加个?就可以让\d+采用非贪婪匹配：
print re.match(r'^(\d+?)(0*)$', '102300').groups()

print '\n------------ 编译 -------------'
#当我们在Python中使用正则表达式时，re模块内部会干两件事情：
#编译正则表达式，如果正则表达式的字符串本身不合法，会报错；
#用编译后的正则表达式去匹配字符串。
#如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，
#接下来重复使用时就不需要编译这个步骤了，直接匹配：
import re
# 编译:
re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')
# 使用：
print re_telephone.match('010-12345').groups()
print re_telephone.match('010-8086').groups()
#编译后生成Regular Expression对象，由于该对象自己包含了正则表达式，
#所以调用对应的方法时不用给出正则字符串。


print '\n------------ 小结 -------------'
'''
小结
正则表达式非常强大，要在短短的一节里讲完是不可能的。
要讲清楚正则的所有内容，可以写一本厚厚的书了。
如果你经常遇到正则表达式的问题，你可能需要一本正则表达式的参考书。
请尝试写一个验证Email地址的正则表达式。版本一应该可以验证出类似的Email：
someone@gmail.com
bill.gates@microsoft.com
版本二可以验证并提取出带名字的Email地址：
<Tom Paris> tom@voyager.org
'''



r = r'^([a-zA-Z.]+)@(\w+).(com|gov|edu|org|net)(.\w+)*'
#r'^\w+\@\w+\.\w{3}'
#r'^<(\w+\s+\w+)>\s+(\w+)@(\w+).(\w+)$'
#'^[0-9a-zA-Z.]+@[a-zA_Z0-9]+.com$'
#r'^([a-zA-Z.]+)@(\w+).(com|gov|edu|org|net)(.\w+)*'
#r'[-_\w\.]{0,64}@([-\w]{1,63}\.)*[-\w]{1,63}'
#r'^[0-9a-zA-Z_]{0,19}@[0-9a-zA-Z]{1,13}\.[com,cn,net]{1,3}$'
#r'[0-9a-zA-Z_]{0,19}@163.com'
t = 'someone@gmail.com'
m = re.match(r, t)
print m.groups() 

t = 'bill.gates@microsoft.com'
m = re.match(r, t)
print m.groups() 

#其实还是很有难度的！   'someone22@gmail.com'   “xxx@mail.xxx.edu.cn" 都不行！
#
#FY：只是进行了很初级的学习！真正使用的时候再深入吧！

